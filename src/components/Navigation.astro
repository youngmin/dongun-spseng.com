---
const navigationItems = [
  { href: "#home", label: "Home" },
  { href: "#services", label: "Services" },
  { href: "#about", label: "About Us" },
  { href: "#contact", label: "Contact" },
];
---

<nav class="bg-white shadow-sm border-b border-neutral-100 sticky top-0 z-50 transition-all duration-300">
  <div class="max-w-7xl mx-auto px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <div class="flex items-center space-x-4">
        <div class="flex-shrink-0">
          <div class="flex items-center space-x-3">
            <svg width="40" height="40" viewBox="0 0 40 40" class="text-[hsl(var(--sps-primary))]">
              <defs>
                <linearGradient id="logoGrad" x1="0%" y1="0%" x2="100%" y2="100%">
                  <stop offset="0%" stop-color="hsl(221, 83%, 53%)" />
                  <stop offset="100%" stop-color="hsl(224, 76%, 48%)" />
                </linearGradient>
              </defs>

              <!-- Outer ring -->
              <circle cx="20" cy="20" r="18" fill="none" stroke="url(#logoGrad)" stroke-width="2"/>

              <!-- Gear teeth outer -->
              <g fill="url(#logoGrad)">
                <rect x="19" y="2" width="2" height="4" rx="1"/>
                <rect x="19" y="34" width="2" height="4" rx="1"/>
                <rect x="2" y="19" width="4" height="2" rx="1"/>
                <rect x="34" y="19" width="4" height="2" rx="1"/>
                <rect x="28.3" y="6.1" width="2" height="4" rx="1" transform="rotate(45 29.3 8.1)"/>
                <rect x="9.7" y="29.9" width="2" height="4" rx="1" transform="rotate(45 10.7 31.9)"/>
                <rect x="29.9" y="28.3" width="2" height="4" rx="1" transform="rotate(-45 30.9 30.3)"/>
                <rect x="6.1" y="9.7" width="2" height="4" rx="1" transform="rotate(-45 7.1 11.7)"/>
              </g>

              <!-- Inner circle -->
              <circle cx="20" cy="20" r="10" fill="url(#logoGrad)"/>

              <!-- Center bolt -->
              <circle cx="20" cy="20" r="3" fill="white"/>
              <circle cx="20" cy="20" r="1.5" fill="url(#logoGrad)"/>

              <!-- SPS letters -->
              <text x="20" y="25" text-anchor="middle" class="fill-white text-xs font-bold">SPS</text>
            </svg>
            <span class="text-xl font-bold text-[hsl(var(--sps-neutral-900))]">
              SPS Engineering
            </span>
          </div>
        </div>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8">
          {navigationItems.map((item) => (
            <a
              href={item.href}
              class="nav-link text-[hsl(var(--sps-neutral-700))] hover:text-[hsl(var(--sps-primary))] px-3 py-2 text-sm font-medium transition-colors duration-200"
            >
              {item.label}
            </a>
          ))}
        </div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button id="mobile-menu-button" class="p-2">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {navigationItems.map((item) => (
        <a
          href={item.href}
          class="mobile-nav-link block px-3 py-2 text-base font-medium text-[hsl(var(--sps-neutral-700))] hover:text-[hsl(var(--sps-primary))] transition-colors duration-200"
        >
          {item.label}
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  // Smooth scroll for navigation links
  document.querySelectorAll('.nav-link, .mobile-nav-link').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      if (href) {
        const element = document.querySelector(href);
        if (element) {
          const headerHeight = 64;
          const elementPosition = element.getBoundingClientRect().top + window.pageYOffset;
          const offsetPosition = elementPosition - headerHeight;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });

          // Close mobile menu if open
          const mobileMenu = document.getElementById('mobile-menu');
          if (mobileMenu) {
            mobileMenu.classList.add('hidden');
          }
        }
      }
    });
  });

  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });
</script>
